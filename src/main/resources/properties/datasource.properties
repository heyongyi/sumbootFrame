#########################################【双数据源】################################
primary.datasource.type=com.alibaba.druid.pool.DruidDataSource
# 初始化大小，最小，最大链接
primary.datasource.xa.properties[initialSize]=20
primary.datasource.xa.properties[minIdle]=20
primary.datasource.xa.properties[maxActive]=200
## 配置获取连接等待超时的时间
primary.datasource.xa.properties[maxWait]=60000
## 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
primary.datasource.xa.properties[timeBetweenEvictionRunsMillis]=120000
## 配置一个连接在池中最小生存的时间，单位是毫秒
primary.datasource.xa.properties[minEvictableIdleTimeMillis]=30000
#用来检测是否有效的sql
primary.datasource.xa.properties[validationQuery]=SELECT 1 FROM DUAL
primary.datasource.xa.properties[testWhileIdle]=true
#申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能
primary.datasource.xa.properties[testOnBorrow]=false
#归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能
primary.datasource.xa.properties[testOnReturn]=false
## 打开PSCache，并且指定每个连接上PSCache的大小
#PreparedStatements 和CallableStatements 都会被缓存起来复用，
#即相同逻辑的SQL可以复用一个游标，这样可以减少创建游标的数量。
primary.datasource.xa.properties[poolPreparedStatements]=true
primary.datasource.xa.properties[maxPoolPreparedStatementPerConnectionSize]=20

primary.datasource.xa.properties[filters]=stat,wall,log4j
primary.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

secondary.datasource.type=com.alibaba.druid.pool.DruidDataSource
# 初始化大小，最小，最大
secondary.datasource.xa.properties[initialSize]=20
secondary.datasource.xa.properties[minIdle]=20
secondary.datasource.xa.properties[maxActive]=200
## 配置获取连接等待超时的时间
secondary.datasource.xa.properties[maxWait]=60000
## 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
secondary.datasource.xa.properties[timeBetweenEvictionRunsMillis]=120000
## 配置一个连接在池中最小生存的时间，单位是毫秒
secondary.datasource.xa.properties[minEvictableIdleTimeMillis]=30000
secondary.datasource.xa.properties[validationQuery]=SELECT 1 FROM DUAL
secondary.datasource.xa.properties[testWhileIdle]=true
secondary.datasource.xa.properties[testOnBorrow]=false
secondary.datasource.xa.properties[testOnReturn]=false
## 打开PSCache，并且指定每个连接上PSCache的大小
secondary.datasource.xa.properties[poolPreparedStatements]=true
secondary.datasource.xa.properties[maxPoolPreparedStatementPerConnectionSize]=20
secondary.datasource.xa.properties[filters]=stat,wall,log4j
secondary.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

## 数据源主要属性  自定义配置中必须定义
primary.datasource.driverClassName=
primary.datasource.url=
primary.datasource.username=
primary.datasource.password=
secondary.datasource.driverClassName=
secondary.datasource.url=
secondary.datasource.username=
secondary.datasource.password=



################################[ 连接池的补充设置 ]#################################
## 初始化大小，最小，最大
#spring.datasource.initialSize=20
#spring.datasource.minIdle=20
#spring.datasource.maxActive=200
## 配置获取连接等待超时的时间
#spring.datasource.maxWait=60000
## 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#spring.datasource.timeBetweenEvictionRunsMillis=120000
## 配置一个连接在池中最小生存的时间，单位是毫秒
#spring.datasource.minEvictableIdleTimeMillis=300000
#spring.datasource.validationQuery=SELECT 1 FROM DUAL
#spring.datasource.testWhileIdle=true
#spring.datasource.testOnBorrow=false
#spring.datasource.testOnReturn=false
## 打开PSCache，并且指定每个连接上PSCache的大小
#spring.datasource.poolPreparedStatements=true
#spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
## 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#spring.datasource.filters=stat,wall,log4j,pageHelper
## 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
## 合并多个DruidDataSource的监控数据
##spring.datasource.useGlobalDataSourceStat=true
